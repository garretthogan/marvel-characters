{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["env","require","OFFSET_INCREMENT","getCharacters","query","fetch","concat","querystring","stringify","Object","objectSpread","apikey","API_KEY","then","res","json","total","data","characters","results","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onInput","event","setState","keyword","target","value","search","loadPage","offset","arguments","length","undefined","state","prevState","loading","searchOffset","nameStartsWith","searchResults","getNextPage","nextOffset","getPreviousPage","_this$state","react_default","a","createElement","index_es","position","style","padding","color","onChange","placeholder","width","float","onClick","map","result","index","key","maxWidth","height","paddingTop","image","thumbnail","path","extension","title","name","subheader","striptags","description","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3b4f1123.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Card,\n  CardMedia,\n  CardHeader,\n  AppBar,\n  Toolbar,\n  InputBase,\n  Button,\n  LinearProgress\n} from '@material-ui/core';\nimport querystring from 'querystring';\nimport striptags from 'striptags';\n\nconst env = require('./env.json');\n\nconst API_URL = 'https://gateway.marvel.com/v1/public';\n\nconst OFFSET_INCREMENT = 20;\n\nconst getCharacters = query =>\n  fetch(\n    `${API_URL}/characters?${querystring.stringify({\n      ...query,\n      apikey: env.API_KEY\n    })}`\n  )\n    .then(res => res.json())\n    .then(res => ({ total: res.data.total, characters: res.data.results }));\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      keyword: '',\n      searchResults: [],\n      searchOffset: 0,\n      total: 0\n    };\n  }\n\n  onInput = event => {\n    this.setState({ keyword: event.target.value });\n  };\n\n  search = () => {\n    this.loadPage();\n  };\n\n  loadPage = (offset = 0) => {\n    const { keyword } = this.state;\n\n    this.setState(prevState => ({\n      loading: true,\n      searchOffset: offset\n    }));\n\n    getCharacters({ nameStartsWith: keyword, offset }).then(results => {\n      this.setState({\n        loading: false,\n        searchResults: results.characters,\n        total: results.total\n      });\n    });\n  };\n\n  getNextPage = () => {\n    const { searchOffset } = this.state;\n    const nextOffset = searchOffset + OFFSET_INCREMENT;\n    this.loadPage(nextOffset);\n  };\n\n  getPreviousPage = () => {\n    const { searchOffset } = this.state;\n    const nextOffset = searchOffset - OFFSET_INCREMENT;\n\n    this.loadPage(nextOffset);\n  };\n\n  render() {\n    const { keyword, searchResults, total, searchOffset, loading } = this.state;\n\n    return (\n      <div>\n        <AppBar position=\"sticky\">\n          <Toolbar>\n            <div style={{ padding: 12, color: 'white' }}>\n              <InputBase\n                style={{ color: 'inherit' }}\n                value={keyword}\n                onChange={this.onInput}\n                placeholder=\"Character...\"\n              />\n            </div>\n            <div style={{ width: '100%' }}>\n              <Button\n                style={{ float: 'right', color: 'inherit' }}\n                onClick={this.search}\n              >\n                Search\n              </Button>\n            </div>\n          </Toolbar>\n          {loading && <LinearProgress color=\"secondary\" />}\n        </AppBar>\n        <div>\n          {searchResults.map((result, index) => (\n            <div style={{ padding: 12 }} key={index}>\n              <Card style={{ maxWidth: 400 }}>\n                <CardMedia\n                  style={{ height: 0, paddingTop: '56.25%' }}\n                  image={`${result.thumbnail.path}.${\n                    result.thumbnail.extension\n                  }`}\n                  title={result.name}\n                />\n                <CardHeader\n                  title={result.name}\n                  subheader={striptags(result.description)}\n                />\n              </Card>\n            </div>\n          ))}\n        </div>\n        <div>\n          {searchOffset >= OFFSET_INCREMENT && (\n            <button onClick={this.getPreviousPage}>Previous Page</button>\n          )}\n          {searchOffset < total - OFFSET_INCREMENT && (\n            <button onClick={this.getNextPage}>Next Page</button>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}